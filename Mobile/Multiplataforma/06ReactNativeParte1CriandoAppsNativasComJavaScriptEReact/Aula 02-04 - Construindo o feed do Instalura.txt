Agora que já temos uma app rodando e mais familiaridade com o ambiente de desenvolvimento, vamos começar a construir nosso feed do instalura.

Vamos iniciar reproduzindo o primeiro post do feed, e para isso precisamos apresentar uma foto e o nome do usuário que a publicou na app. Vamos começar substituindo todo o código gerado inicialmente pela ferramenta de CLI por componentes mais adequados à nossa ideia inicial de tela principal.

...
const width = Dimensions.get('screen').width;

export default class InstaluraMobile extends Component {

    render() {
        return (
            <View>
                <Text>rafael</Text>
                <Image source={require('./resources/img/alura.png')}
                    style={{width: width, height: width}} />
            </View>
        );
    }
}
Usamos o componente Image do React Native para carregar recursos de imagens do nosso projeto e já definimos um estilo mais adequado, planejando largura e altura das nossas fotos de acordo com o tamanho da tela do dispositivo com o auxílio da API Dimensions.

Já temos um primeiro "post" sendo exibido. Porém precisamos planejar nosso feed exibindo uma série de imagens que futuramente vão inclusive ser carregadas a partir de chamadas à nossa API.

Vamos começar pensando na renderização de uma lista local de fotos, apenas pra facilitar o pensamento nesse momento.

...
const width = Dimensions.get('screen').width;

export default class InstaluraMobile extends Component {
    render() {
        const fotos = [
            {id: 1, usuario: 'rafael'},
            {id: 2, usuario: 'alberto'},
            {id: 3, usuario: 'vitor'}
        ];

        return (
            <View>
                {fotos.map(foto => 
                    <View key={foto.id}>
                        <Text>{foto.usuario}</Text>
                        <Image source={require('./resources/img/alura.png')}
                            style={{width: width, height: width}} />        
                    </View>
                )}
            </View>
        );
    }
}
Podemos usar a função map da lista, e para cada elemento renderizar nosso par - nome de usuário e foto - que hoje representam um post de um usuário.

Como estamos rodando na plataforma IOS, precisamos de um ajuste momentâneo para que nosso texto não seja apresentado sobre a barra de status do sistema. Usamos para isso uma simples margem superior no componente View que envolve os demais: <View style={{marginTop: 20}}>...</View>. Testando no Android esse workaround não se faz necessário. Mais adiante usaremos recursos que encapsulam esse trabalho e já aplicam os ajustes de renderização específicos pra cada plataforma.

Agora já temos várias fotos sendo apresentadas no feed. Mas repare que se tentarmos fazer um scroll pela lista nada acontece. Hoje a tela fica estática porque simplesmente ainda não usamos um componente que nos dê esse suporte. Podemos trocar a <View> principal por um <ScrollView>, assim já conseguiremos percorrer toda a lista de fotos pela tela do dispositivo.

Um outro ponto que podemos discutir a respeito é como ficou nosso código. Estamos fazendo todo o trabalho do mapeamento na mão, usando o map JS entre a sintaxe JSX, o que pode tornar o código mais complexo do que necessário. Pensando nisso o React Native já oferece componentes de mais alto nível para trabalharmos com listas.

const width = Dimensions.get('screen').width;

export default class InstaluraMobile extends Component {
    render() {
        const fotos = [
            {id: 1, usuario: 'rafael'},
            {id: 2, usuario: 'alberto'},
            {id: 3, usuario: 'vitor'}
        ];

        return (
            <FlatList style={{marginTop: 20}}
                keyExtractor={item => item.id}
                data={fotos}
                renderItem={ ({item}) =>
                    <View>
                        <Text>{item.usuario}</Text>
                        <Image source={require('./resources/img/alura.png')}
                            style={{width: width, height: width}} />        
                    </View>
                }
            />
        );
    }
}
Aqui podemos perceber que ao invés de misturar sintaxes na implementação do render, apenas passamos valores para propriedades do componente FlatList.

Nas últimas versões do React Native o componente de lista utilizado espera receber como chave identificadora de cada elemento renderizado (key) uma String, soltando um warning caso o tipo de dado repassado seja diferente. Sendo assim poderíamos facilmente contornar esse detalhe fazendo o seguinte ajuste na propriedade keyExtractor...

keyExtractor={item => String(item.id)}
=)