Motivo da atualização do react-router
Com a chegada do React Native o time do react-router evoluiu o projeto para que o projeto de rotas forneça suporte tanto para aplicações web que utilizam o react quanto para as aplicações mobile que forem utilizar o React Native. O problema para gente é que, para dar esse suporte, eles reescreveram o projeto de uma forma que nosso código com a versão 2 ou 3 não funciona mais. O objetivo deste exercício é fornecer os passos para você configurar seu projeto utilizando a última versão. Apenas lembre que os conceitos permanecem os mesmos, apenas a implementação é que vai ser diferente.

Mão na massa
Instalando as novas dependências
O primeiro passo é instalar uma dependência chamada react-router-dom. Ele é a versão do react-router com foco no navegador. Acesse a pasta do seu projeto e rode o seguinte comando:

npm install react-router-dom@4.1.1 --save
Agora, acesse o arquivo package.json e remova a referência para o react-router antigo. Isso é opcional, mas estou sugerindo apenas para não gerar confusão no seu projeto.

Alterações no código
As nossas alterações vão ficar concentradas no arquivo index.js e também no app.js. Primeiro vou mostrar o código final e logo embaixo alguns detalhes importantes serão explicados. O arquivo index.js deve ficar com o seguinte conteúdo:

import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import AutorAdmin from './Autor';
import LivroAdmin from './Livro';
import Home from './Home';
import './index.css';
import {BrowserRouter as Router, Route,Switch,Link} from 'react-router-dom';

ReactDOM.render((
        <Router>
            <App>
                    <Switch>            
                        <Route exact path="/" component={Home}/>
                        <Route path="/autor" component={AutorAdmin}/>
                        <Route path="/livro" component={LivroAdmin}/>                
                    </Switch>            
            </App>
        </Router>

), document.getElementById('root'));
Já no arquivo app.js, apenas altere o import de import { Link } from 'react-router' para import { Link } from 'react-router-dom'.

Agora vamos para as explicações :). O primeiro detalhe importante é que mudou a forma de fazermos as rotas aninhadas(nested routes). O Router recebe apenas um componente, que pode ser qualquer coisa. O fato primordial é que dentro desse componente exista alguma declaração de rotas, para que os endereços continuem funcionando. Perceba que foi justamente isso que fizemos quando passamos o componente App como filho de Router o Switch (que já vai ser explicado) como argumento da App.

Um segundo ponto importante é a utilização do componente Switch. Poderíamos simplesmente deixar várias tag Route como parâmetro da nossa App, dessa forma as rotas seriam registradas e tudo funcionaria. O problema é que nesse caso queremos deixar claro que apenas uma das rotas vai ser acionada, o Switch serve justamente para garantir isso.

Da forma que fizemos, mantemos exatamente o comportamento da versão anterior da nossa aplicação, só que usando a versão mais nova do router!