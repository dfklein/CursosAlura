<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>br.com.alura.maven</groupId>
	<artifactId>lojaweb</artifactId>
	<packaging>war</packaging>
	<version>1.0.0-SNAPSHOT</version>
	<name>lojaweb Maven Webapp</name>
	<url>http://maven.apache.org</url>
	<dependencies>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<!-- 
				Quando o escopo é de teste, isto significa que o pacote é usado apenas até a fase
			 	de testes, não sendo incluído, por exemplo, no empacotamento 
			-->
			<scope>test</scope>
		</dependency>
		
		<dependency>
            <groupId>br.com.caelum.stella</groupId>
            <artifactId>caelum-stella-core</artifactId>
            <version>2.1.2</version>
            <!-- 
            	O escopo de runtime significa que ele não é usado em tempo de compilação mas é usado
            	em tempo de execução. No eclipse ele continuará aparecendo no classpath porque o eclipse
            	também executa um projeto. Infelizmente no eclipse ele compilará (está no classpath).
            	No entanto se você compilar por fora (dar mvn compile em linha de comando, por exemplo)
            	você terá um erro de compilação.
            	
            	É importante saber que esta dependência estará disponível também em tempo de testes.
             -->
            <scope>runtime</scope>
        </dependency>
		
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<!-- 
				Escopo provided quer dizer que a biblioteca é fornecida pelo
				container/servidor de aplicação. Ele é colocado no classpath para ser
				compilado, mas na hora de empacotar ele não é enviado.
			-->
			<scope>provided</scope>
		</dependency>
	
		<!--
			++++ COLOCANDO PROJETOS LOCAIS COMO DEPENDÊNCIA ++++
		
			Quando você declara uma dependência que não existe no repositório remoto o Maven
			vai procurá-la no seu repositório local.
			
			Neste exemplo primeiro declaramos uma dependência do projeto produto e obtivemos o erro:
			
			++++ Description	Resource	Path	Location	Type The container 'Maven Dependencies' references non existing library 'C:\Users\dfrederi\.m2\repository\br\com\alura\maven\produtos\1.0-SNAPSHOT\produtos-1.0-SNAPSHOT.jar'	lojaweb		Build path	Build Path Problem
			
			Quando você faz isto via eclipse ele sabe que você está referenciando um projeto
			que já está na sua workspace. Ao invés de empacotá-lo e gerar um JAR, ele apenas
			referncia o outro projeto. Isto é bom porque ao alterar um projeto as alterações já
			refletem no outro (em termos de compilação). Porém, se você tentar empacotá-lo você
			terá um erro (porque ele não encontra o projeto em nenhum repositório). Além disso, o código TODO do outro projeto se torna acessível (como
			as classes de teste, o que não faz nenhum sentido).
			
			A primeira coisa que você precisa fazer para resolver isso é instalar o projeto no seu 
			repositório	com mvn install. No entanto, isto não empacota classes de teste (porque não
			deve mesmo). Se por acaso você utilizar alguma classe do pacote de testes no seu código,
			ele quebra em tempo de execução (por mais que seja óbvio que você não vai usar, vale explicar
			a consequência).
			
		-->
		<dependency>
			<groupId>br.com.alura.maven</groupId>
			<artifactId>produtos</artifactId>
			<version>1.0-SNAPSHOT</version>
			<!-- 
				O escopo padrão de uma dependência é "compile" (que seria a fase seguinte aos testes).
				Significa que ela precisa ser compilada e precisa ser empacotada com o seu projeto.
			 -->
			<!-- escopo não declarado ou <scope>compile</scope> -->
		</dependency>
		
		<!-- 
			No exemplo abaixo mostramos como excluir uma dependência de dentro de uma outra dependência.
		 -->
		<dependency>
		    <groupId>com.thoughtworks.xstream</groupId>
		    <artifactId>xstream</artifactId>
		    <version>1.4.1</version>
		        <exclusions>
		            <exclusion>
		                <groupId>xmlpull</groupId>
		                <artifactId>xmlpull</artifactId>
		            </exclusion>
		        </exclusions>
		</dependency>
		
	</dependencies>

	<build>

		<finalName>lojaweb</finalName>

		<plugins>

			<!-- Este é um plugin do Jetty que permite que você suba um container 
				Jetty ao executar a build. Ele por padrão vai ler seu index.jsp em localhost:8080 
				Utilize o comando mvn jetty:run -->
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>9.3.7.v20160115</version>
				<configuration>
					<!-- Esta configuração escaneia seu código a cada 10 segundos atrás de alterações para fazer um hot deploy. -->
					<scanIntervalSeconds>10</scanIntervalSeconds>
					<!-- Esta configuração adiciona o contexto ao plugin do jetty (localhost:8080/loja -->
					<webApp>
						<contextPath>/loja</contextPath>
					</webApp>
				</configuration>
			</plugin>


		</plugins>

	</build>

</project>
